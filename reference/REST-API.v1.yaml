openapi: 3.0.0
info:
  title: Curator REST API
  version: '1.0'
  description: Ad-hoc tasks orchestration system.
  contact:
    name: Denis Bazhenov
    email: dotsid@gmail.com
    url: 'http://bazhenov.me/'
  license: {}
servers:
  - url: 'http://curator.local'
paths:
  /register-agent:
    post:
      summary: Register new agent
      operationId: register-agent
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                enum:
                  - text/event-stream
              required: true
          content:
            text/event-stream:
              examples:
                run-task:
                  value: |-
                    event: run-task
                    data: {"name": "cleanup-database", "execution": "596cf5b4-70ba-11ea-bc55-0242ac130003"}
                run-and-cancel-task:
                  value: |-
                    event: run-task
                    data: {"name": "cleanup-database", "execution": "596cf5b4-70ba-11ea-bc55-0242ac130003"}

                    event: stop-task
                    data: {"execution": "596cf5b4-70ba-11ea-bc55-0242ac130003"}
      description: |
        Registers new agent in the system. All agent tasks will be available for operators after registration.

        Response of the system is a SSE stream used for sending control commands to the agent. Following commands can be issued by curator to an agent:

        * `run-task`;
        * `stop-task`.

        SSE channel is used only for issuing commands to agent. Agent are report status back to Curator using REST API.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Agent'
            examples:
              example:
                value:
                  application: todo-application
                  instance: web-frontend
                  tasks:
                    - id: cleanup-database
                    - id: report-load
        description: Agent must provide information about itself and available tasks
      parameters: []
  /task/report:
    post:
      summary: Report Execution Status
      operationId: report-status
      responses:
        '200':
          description: OK
      description: |-
        Reports back task execution status to Curator. Agent could select report interval on it's own based on event-density (stdout/stderr write rate). It's recommended to limit maximum report frequency 3-4 times a second.

        When report acknowledged by Curator, agent could remove reported stdout/stderr content and must not send it with following reports. So stdout/stderr reporting is incremental.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecutionReport'
        description: Execution status
    parameters: []
  /task/run:
    parameters: []
    post:
      summary: Run a Task
      operationId: post-task-run
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  execution_id:
                    type: string
                    format: uuid
                    description: New execution UUID
                required:
                  - execution_id
              examples:
                basic:
                  value:
                    execution_id: 8ceb0d95-68c1-476c-8082-54b4a28d6df2
      description: Creates an execution for a given task
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                task_id:
                  type: string
                  description: task to execute
                agent:
                  type: object
                  description: agent instance to run task on
                  required:
                    - application
                    - instance
                  properties:
                    application:
                      type: string
                    instance:
                      type: string
              required:
                - task_id
                - agent
            examples:
              create new execution:
                value:
                  task_id: cleanup-database
                  agent:
                    application: todo-application
                    instance: web-frontend
        description: Run a Task and returns new execution.
      parameters: []
  /agents:
    get:
      summary: List Agents
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Agent'
              examples:
                basic:
                  value:
                    - application: todo-app
                      instance: web-frontend
                      tasks:
                        - name: remove-inactive-sessions
                    - application: todo-app
                      instance: worker
                      tasks:
                        - name: cleanup-database
      operationId: get-agents
      description: List all active agents in the system and their tasks
  /executions:
    get:
      summary: Your GET endpoint
      tags: []
      responses: {}
      operationId: get-executions
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Execution'
        description: ''
components:
  schemas:
    Task:
      title: Task
      type: object
      description: Task is the unit of work which agent capable of executing.
      x-examples:
        basic:
          id: cleanup-database
      properties:
        id:
          type: string
          description: name of the task. Will be presented as is to operator using the system
      required:
        - id
    Agent:
      title: Agent
      type: object
      description: Agent is a program capable of running tasks. Agent described by application and instance name. Instance name is the hostname in most cases. Application name is used for grouping replicated or distributed instances in one logical unit for convinience purposes as well as more fine grained control over task execution.
      x-examples:
        basic:
          application: todo
          instance: todo-web-frontend
          tasks:
            - name: cleanup-database
            - name: send-notifications
      properties:
        application:
          type: string
          example: todo-application
        instance:
          type: string
          example: todo-application-host
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/Task'
      required:
        - application
        - instance
        - tasks
    ExecutionReport:
      title: ExecutionReport
      type: object
      x-examples:
        in-progress-reporting-stdout:
          id: 8ceb0d95-68c1-476c-8082-54b4a28d6df2
          status: running
          stdout-append: 'Warning: Skipping zsh-completions: most recent version 0.31.0 not installed'
      properties:
        id:
          type: string
          format: uuid
          description: execution id given agent when `start-task` command is issued
        status:
          $ref: '#/components/schemas/ExecutionStatus'
        stdout_append:
          type: string
          description: stdout new content since last report (if any)
      required:
        - id
        - status
    Execution:
      title: Execution
      type: object
      x-examples:
        example-1: {}
      properties:
        id:
          type: string
        task:
          type: string
        agent:
          type: string
    ExecutionState:
      title: ExecutionState
      type: object
      properties:
        id:
          type: string
        agent:
          $ref: '#/components/schemas/AgentRef'
        stdout:
          type: string
        status:
          $ref: '#/components/schemas/ExecutionStatus'
      required:
        - id
        - status
    ExecutionStatus:
      type: string
      title: ExecutionStatus
      enum:
        - INITIATED
        - REJECTED
        - RUNNING
        - FAILED
        - COMPLETED
      x-examples: {}
    AgentRef:
      title: AgentRef
      type: object
      properties:
        application:
          type: string
        instance:
          type: string
      required:
        - application
        - instance
